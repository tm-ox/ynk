---
import { Image } from "astro:assets";

const { src, alt, cls } = Astro.props;
---

<div class="w-[90%] mx-auto">
  <!-- Lightbox -->
  <div
    class="lightbox invisible fixed top-0 left-0 z-50 w-full h-full bg-opacity-90 backdrop-blur-xl cursor-default p-6"
  >
    <button class="carouselButton close">X</button>
    <button class="carouselButton left is-hidden">&#8656;</button>
    <div class="relative h-full overflow-hidden">
      <div class="carousel relative h-full p-0 m-0 list-none transition">
        <!-- Lightbox slot -->
        <slot name="lightbox" />
        <!-- / -->
      </div>
    </div>
    <button class="carouselButton right">&#8658;</button>
  </div>
  <!-- Gallery -->
  <div class="imageGrid grid grid-cols-6 gap-3">
    <!-- Gallery slot -->
    <slot name="gallery" />
    <!-- / -->
  </div>
</div>

<script is:inline>
const lightbox = document.querySelector(".lightbox");
const close = document.querySelector(".close");
const carousel = document.querySelector(".carousel");
const slides = Array.from(carousel.children);
const nextButton = document.querySelector(".right");
const prevButton = document.querySelector(".left");
const imageGrid = document.querySelector(".imageGrid");
const imageGridImage = Array.from(imageGrid.children);
const slideWidth = slides[0].getBoundingClientRect().width;
// imageGrid
imageGrid.addEventListener("click", (e) => {
    lightbox.classList.remove("invisible");
    const targetImage = e.target.closest("button");
    if (!targetImage) return;
    const active = carousel.querySelector(".active");
    const targetIndex = imageGridImage.findIndex(
        (image) => image === targetImage
    );
    const targetSlide = slides[targetIndex];
    moveToSlide(carousel, active, targetSlide);
    arrowVis(slides, prevButton, nextButton, targetIndex);
});
// carousel
// arrange
const setSlidePosition = (slide, index) => {
    slide.style.left = slideWidth * index + "px";
};
slides.forEach(setSlidePosition);
// move
const moveToSlide = (carousel, active, targetSlide) => {
    carousel.style.transform = "translateX(-" + targetSlide.style.left + ")";
    active.classList.remove("active");
    targetSlide.classList.add("active");
};
// arrow visability
const arrowVis = (slides, prevButton, nextButton, targetIndex) => {
    if (targetIndex === 0) {
        prevButton.classList.add("is-hidden");
        nextButton.classList.remove("is-hidden");
    } else if (targetIndex === slides.length - 1) {
        prevButton.classList.remove("is-hidden");
        nextButton.classList.add("is-hidden");
    } else {
        prevButton.classList.remove("is-hidden");
        nextButton.classList.remove("is-hidden");
    }
};
// prev
prevButton.addEventListener("click", (e) => {
    const active = carousel.querySelector(".active");
    const prevSlide = active.previousElementSibling;
    const prevIndex = slides.findIndex((slide) => slide === prevSlide);
    moveToSlide(carousel, active, prevSlide);
    arrowVis(slides, prevButton, nextButton, prevIndex);
});
// next
nextButton.addEventListener("click", (e) => {
    const active = carousel.querySelector(".active");
    const nextSlide = active.nextElementSibling;
    const nextIndex = slides.findIndex((slide) => slide === nextSlide);
    moveToSlide(carousel, active, nextSlide);
    arrowVis(slides, prevButton, nextButton, nextIndex);
});
// close
close.addEventListener("click", (e) => {
    lightbox.classList.add("invisible");
});
</script>

<style>
  .carouselButton {
    @apply absolute top-[50%] -translate-y-[50%] bg-slate-300 rounded-full text-4xl z-50;
  }
  .close {
    @apply top-[40px] right-[40px];
  }
  .left {
    @apply left-[40px];
  }
  .right {
    @apply right-[40px];
  }
  .is-hidden {
    @apply hidden;
  }
</style>
